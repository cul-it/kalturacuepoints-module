<?php
// $Id$

/**
 * @file
 * Support for CuePoints in Kaltura Videos
 */

//require_once(dirname(__FILE__) . "/kaltura_php5/KalturaClient.php");

/**
 * load kaltura stuff
 */
function kalturacuepoints_init() {
	//drupal_add_js(drupal_get_path("module", "kaltura") . "/js/kaltura_player_controller.js");
	drupal_add_js(drupal_get_path("module", "kalturacuepoints") . "/kalturacuepoints.js");
}

/**
 * implementation of hook_field_display_node_alter()
 */
function kalturacuepoints_field_display_node_alter(&$display, $context) {
	//drupal_set_message('<pre>' . print_r($context, true) . '</pre>');
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function kalturacuepoints_block_info() {
	$blocks['kalturacuepoints_block'] = array(
		'info' => t('Video Cue Points display'),
		'cache' => DRUPAL_CACHE_PER_PAGE,
	);
	return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function kalturacuepoints_block_configure($delta = '') {
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.

  $form = array();
  if ($delta == 'kalturacuepoints_block') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['kalturacuepoints_asset'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura ID'),
      '#size' => 60,
      '#description' => t('Kaltura ID for the asset eg. 1_b270ldha.'),
      '#default_value' => variable_get('kalturacuepoints_asset',  t('1_b270ldha')),
    );
    $form['kalturacuepoints_partnerid'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura Partner ID'),
      '#size' => 60,
      '#description' => t('Kaltura Partner ID for the user eg. 111222.'),
      '#default_value' => variable_get('kalturacuepoints_partnerid',  ''),
    );
    $form['kalturacuepoints_secret'] = array(
      '#type' => 'password',
      '#title' => t('Kaltura Partner password'),
      '#size' => 60,
      '#description' => t('Kaltura password for the user.'),
      '#default_value' => variable_get('kalturacuepoints_secret',  ''),
    );
    $form['kalturacuepoints_admin_secret'] = array(
      '#type' => 'password',
      '#title' => t('Kaltura Administration Secret'),
      '#size' => 60,
      '#description' => t('Kaltura addmin secret from the KMC.'),
      '#default_value' => variable_get('kalturacuepoints_admin_secret',  ''),
    );
    $form['kalturacuepoints_service_url'] = array(
      '#type' => 'password',
      '#title' => t('Kaltura Service URL'),
      '#size' => 120,
      '#description' => t('eg. http://www.kaltura.com'),
      '#default_value' => variable_get('kalturacuepoints_service_url',  
      	t('!url', array('!url' => 'http://www.kaltura.com'))),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function kalturacuepoints_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'kalturacuepoints_block') {
    // Have Drupal save the string to the database.
    variable_set('kalturacuepoints_asset', $edit['kalturacuepoints_asset']);
    variable_set('kalturacuepoints_partnerid', $edit['kalturacuepoints_partnerid']);
    variable_set('kalturacuepoints_secret', $edit['kalturacuepoints_secret']);
    variable_set('kalturacuepoints_admin_secret', $edit['kalturacuepoints_admin_secret']);
    variable_set('kalturacuepoints_service_url', $edit['kalturacuepoints_service_url']);
  }
  return;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function kalturacuepoints_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'kalturacuepoints_block':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Kaltura Cue Points');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = kalturacuepoints_contents($delta);
      break;
  }
  return $block;
}

/**
 * converts HH:MM:SS to seconds
 */
function kalturacuepoints_to_seconds($hhmmss) {
	$parts = explode(':', $hhmmss);
	$sec = array_pop($parts);
	$sec += array_pop($parts) * 60;
	$sec += array_pop($parts) * 60 * 60;
	return $sec;
}

/**
 * finds the currently selected language
 */
function kalturacuepoints_language() {
	global $language;
	return $language->language;
	}

/**
 * converts playtime cck field to seconds
 */
function kalturacuepoints_playtime($playtime) {
	$start = $playtime['und'][0]['value'];
	$timezone = $playtime['und'][0]['timezone'];
	$tz_offset = kalturacuepoints_get_timezone_offset('UTC', $timezone);
	
	$my_date = strtotime("$start") + $tz_offset;
	
	$unix_epoch = strtotime("1970-1-1 00:00:00");
	$return_sec['start'] = format_date($my_date, 'custom', 'H:i:s');
	//$tz_offset = strtotime(date("M d Y H:i:s")) - strtotime(gmdate("M d Y H:i:s"));
    //$my_date += $tz_offset;
    //$return_sec['start'] = format_date($my_date, 'custom', 'H:i:s', NULL);
	$end = $playtime['und'][0]['value2'];
	if (strcmp($start,$end) != 0) {
		$my_date = strtotime($end);
		$my_date += $tz_offset;
		$return_sec['end'] = kalturacuepoints_to_seconds(format_date($my_date, 'custom', 'H:i:s', NULL));
		}
	else {
		$return_sec['end'] = false;
		}
	return $return_sec;
}

/**    Returns the offset from the origin timezone to the remote timezone, in seconds.
 *    @param $remote_tz;
 *    @param $origin_tz; If null the servers current timezone is used as the origin.
 *    @return int;
 */
function kalturacuepoints_get_timezone_offset($remote_tz, $origin_tz = null) {
    if($origin_tz === null) {
        if(!is_string($origin_tz = date_default_timezone_get())) {
            return false; // A UTC timestamp was returned -- bail out!
        }
    }
    $origin_dtz = new DateTimeZone($origin_tz);
    $remote_dtz = new DateTimeZone($remote_tz);
    $origin_dt = new DateTime("now", $origin_dtz);
    $remote_dt = new DateTime("now", $remote_dtz);
    $offset = $origin_dtz->getOffset($origin_dt) - $remote_dtz->getOffset($remote_dt);
    return $offset;
}

/**
 * A module-defined block content function.
 */
function kalturacuepoints_contents($which_block) {
  switch ($which_block) {
	case 'kalturacuepoints_block':
		// detect the current node (block shows only on video and segment nodes)
		if ( arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2) ) {
  			$node = node_load(arg(1));
  			if ($node->type == 'video') {
  				$start_field = 'field_film_start';
  				$end_field = 'field_film_end';
  				$video_id = $node->field_kaltura_entry_id['und'][0]['safe_value'];
  				}
 			else if ($node->type == 'segment') {
  				$start_field = 'field_seg_start';
  				$end_field = 'field_seg_end';
  				$vnodeid = $node->field_seg_video['und'][0]['nid'];
  				$vnode = node_load($vnodeid);
  				$video_id = $vnode->field_kaltura_entry_id['und'][0]['safe_value']; 				
 				}
 			else {
 				return array( '#markup' => t('Only show kalturacuepoints block on video and segment nodes.'));
 				}
			$start = isset($node->{$start_field}['und'][0]['safe_value']) ?
				$node->{$start_field}['und'][0]['safe_value'] : 0;
			$start = kalturacuepoints_to_seconds($start);
			if (isset($node->{$end_field}['und'][0]['safe_value'])) {
				$end = kalturacuepoints_to_seconds($node->{$end_field}['und'][0]['safe_value']);
				}
			else {
				$end = false;
				}
  			$language = kalturacuepoints_language();
			$title = isset($node->title_field["$language"][0]['safe_value']) ?
				$node->title_field["$language"][0]['safe_value'] : '';
			$description = isset($node->body["$language"][0]['safe_value']) ?
				$node->body["$language"][0]['safe_value'] : '';
				
			$time = kalturacuepoints_playtime($node->field_playtime);
			
			$code = array(
				'<div id="ctitle">Title ' . $time['start'] . '</div>',
				//'<ul id="chapters"><li><a id="cp2" data-chapterStartTime="1000" href="#">chapter 2</a></li></ul>',
				kalturacuepoints_player_embed_code($video_id, $title, $description, $start, $end),
				);
			$chaps = array( '#markup' => implode(PHP_EOL, $code));
			return $chaps;
			}
		break;
    case 'kalturacuepoints_block2':
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the variable set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
      // Block content created through the UI defaults to a string.
	  
	  $kaltura_client = kalturacuepoints_getClient(true);
	  if (!$kaltura_client) {
		drupal_set_message(t('Failed to start Kaltura session. Please check your settings.'), 'error');
	  	}
	  else {
	  	$entryId = variable_get('kalturacuepoints_asset', t('1_b270ldha'));
		//Get all Cue points
		$filter = new KalturaCuePointFilter();
		$filter->entryIdEqual = $entryId;
		$pager = null;
		$results = $kaltura_client->cuePoint->listAction($filter, $pager);
		
		$cuePoints = $results->objects;
		usort($cuePoints, "kalturacuepoints_cmp");
		
		$currentChapterNum = 2;
		if(isset($cuePoints[$currentChapterNum]))
			$currentCuePoint = $cuePoints[$currentChapterNum];
		else
			$currentCuePoint = reset($cuePoints);
		
		/*
		drupal_set_message(print_r($currentCuePoint, true)); // jgr
		KalturaAdCuePoint Object
(
    [protocolType] => 0
    [sourceUrl] => 
    [adType] => 1
    [title] => 
    [endTime] => 
    [duration] => 
    [id] => 1_y675t5kc
    [cuePointType] => adCuePoint.Ad
    [status] => 1
    [entryId] => 1_b270ldha
    [partnerId] => 518251
    [createdAt] => 1331652418
    [updatedAt] => 1331652418
    [tags] => vp2-ad
    [startTime] => 420000
    [userId] => batchUser
    [partnerData] => 
    [partnerSortValue] => 
    [forceStop] => 
    [thumbOffset] => 
    [systemName] => 
)
*/
		if (!empty($currentCuePoint)) {
			$output = array('#markup' =>
				t('entryId: @entryId tags: @tags startTime: @start',
				array('@entryId' => $currentCuePoint->entryId, 
					'@tags' => $currentCuePoint->tags,
					'@start' => $currentCuePoint->startTime,
					)
				),
			);
			return $output;	
	  	}
      return array('#markup' => variable_get('kalturacuepoints_asset',  t('A default value. This block was created at %time', array('%time' => date('c')))));
  }
  }
}

		
function kalturacuepoints_cmp($a, $b) {
   if ($a->startTime == $b->startTime)
	   return 0;
   else
	  return ($a->startTime < $b->startTime ? -1 : 1);
}

function kalturacuepoints_getClient($isAdmin = false, $userId = 'SomeUser') {
	return false; //debug
	$partnerId = variable_get('kalturacuepoints_partnerid', '');
	$kConfig = new KalturaConfiguration($partnerId);
	$kConfig->serviceUrl = variable_get('kalturacuepoints_service_url',  t('!url', array('!url' => 'http://www.kaltura.com')));
	$client = new KalturaClient($kConfig);
	
	$sessionType = ($isAdmin)? KalturaSessionType::ADMIN : KalturaSessionType::USER; 
	try
	{
		$adminSecret = variable_get('kalturacuepoints_admin_secret', '');
		$ks = $client->generateSession($adminSecret, $userId, $sessionType, $partnerId);
		$client->setKs($ks);
	}
	catch(Exception $ex)
	{
		drupal_set_message(t("could not start session - check configurations in Kaltura Cue Points"));
	}
	
	return $client;
}

function kalturacuepoints_player_embed_code($entry, $title, $description, 
	$start_sec = 0, $end_sec = false, 
	$partner = 518251, $sub_partner = 51825100, $player = 7929281 ) {
	// emit code for a kaltura player
	// $entry is the id of the asset like 1_t9lgbvo6
	$playrange = "mediaProxy.mediaPlayFrom=$start_sec";
	if ($end_sec !== false) {
		$playrange .= "&mediaProxy.mediaPlayTo=$end_sec";
		}
	$str = <<<EOD
<script type="text/javascript" 
	src="http://www.kaltura.com/p/$partner/sp/$sub_partner/embedIframeJs/uiconf_id/$player/partner_id/$partner">
	</script>
<object id="kaltura_player_1336413328" 
	name="kaltura_player_1336413328" 
	type="application/x-shockwave-flash" 
	allowFullScreen="true" 
	allowNetworking="all" 
	allowScriptAccess="always" 
	height="289" 
	width="400" 
	bgcolor="#000000" 
	xmlns:dc="http://purl.org/dc/terms/" 
	xmlns:media="http://search.yahoo.com/searchmonkey/media/" 
	rel="media:video" 
	resource="http://www.kaltura.com/index.php/kwidget/cache_st/1336413328/wid/_$partner/uiconf_id/$player/entry_id/$entry" 
	data="http://www.kaltura.com/index.php/kwidget/cache_st/1336413328/wid/_$partner/uiconf_id/$player/entry_id/$entry">
<param name="allowFullScreen" value="true" />
<param name="allowNetworking" value="all" />
<param name="allowScriptAccess" value="always" />
<param name="bgcolor" value="#000000" />
<param name="flashVars" value="streamerType=rtmp&$playrange&externalInterfaceDisabled=false&jsInterfaceReadyFunc=jsInterfaceReady" />
<param name="movie" 
	value="http://www.kaltura.com/index.php/kwidget/cache_st/1336413328/wid/_$partner/uiconf_id/$player/entry_id/$entry" />
<a rel="media:thumbnail" 
	href="http://cdnbakmi.kaltura.com/p/$partner/sp/$sub_partner/thumbnail/entry_id/$entry/width/120/height/90/bgcolor/000000/type/2">
	</a>
<span property="dc:description" 
	content="$description">
	</span>
<span property="media:title" 
	content="$title">
	</span>
<span property="media:width" 
	content="400">
	</span>
<span property="media:height" 
	content="289">
	</span>
<span property="media:type" 
	content="application/x-shockwave-flash">
	</span>
</object>
EOD;
	return $str;
}