<?php
// $Id$

/**
 * @file
 * Support for CuePoints in Kaltura Videos
 */

//require_once(dirname(__FILE__) . "/kaltura_php5/KalturaClient.php");

/**
 * load kaltura stuff
 */
function kalturacuepoints_init() {
	//drupal_add_js(drupal_get_path("module", "kaltura") . "/js/kaltura_player_controller.js");
	drupal_add_js(drupal_get_path("module", "kalturacuepoints") . "/kalturacuepoints.js");
}

/**
 * Implements hook_permission
 * @return [type] [description]
 */
function kalturacuepoints_permission() {
  return array(
    'administer kalturacuepoints settings' => array(
      'title' => t('Administer Kalturacuepoints'),
      'description' => t('Perform administration tasks for Kalturacuepoints.'),
      ),
    );
}

/**
 * form for administration items for this module
 */
function kalturacuepoints_admin() {
  $form = array();
  $form['kalturacuepoints_partnerid'] = array(
    '#type' => 'textfield',
    '#title' => t('Kaltura Partner ID'),
    '#size' => 60,
    '#description' => t('Kaltura Partner ID for the user eg. 111222.'),
    '#default_value' => variable_get('kalturacuepoints_partnerid',  ''),
  );
  $form['kalturacuepoints_subpartnerid'] = array(
    '#type' => 'textfield',
    '#title' => t('Kaltura Sub Partner ID'),
    '#size' => 60,
    '#description' => t('Kaltura Sub Partner ID for the user eg. 11122233.'),
    '#default_value' => variable_get('kalturacuepoints_subpartnerid',  ''),
  );
  $form['kalturacuepoints_no_video_message_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Message to display when there is no video'),
    '#size' => 120,
    '#description' => t('When the block can not find a video to display show this.'),
    '#default_value' => variable_get('kalturacuepoints_no_video_message_field', t('Configure kalturacuepoints block field names or hide this block!')),
  );
  $form['kalturacuepoints_playerid'] = array(
    '#type' => 'textfield',
    '#title' => t('Kaltura Player ID'),
    '#size' => 60,
    '#description' => t('Kaltura ID for the video player eg. 1112223.'),
    '#default_value' => variable_get('kalturacuepoints_playerid',  ''),
  );
  $form['kalturacuepoints_player_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Width in pixels'),
    '#size' => 60,
    '#description' => t('For the width and media:width of the embed code.'),
    '#default_value' => variable_get('kalturacuepoints_player_width',  '400'),
  );
  $form['kalturacuepoints_player_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Height in pixels'),
    '#size' => 60,
    '#description' => t('For the height and media:height of the embed code.'),
    '#default_value' => variable_get('kalturacuepoints_player_height',  '289'),
  );
  $form['kalturacuepoints_entry_id_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Field name for Kalture Entry ID'),
    '#size' => 60,
    '#description' => t('Internal name for the field containing the Kaltura ID for a video.'),
    '#default_value' => variable_get('kalturacuepoints_entry_id_field',  'field_kaltura_entry_id'),
  );
  $form['kalturacuepoints_playtime_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Field name for segment start/stop times'),
    '#size' => 60,
    '#description' => t('Internal name for a Date field where the begin and end times are used to start and stop the video playback.'),
    '#default_value' => variable_get('kalturacuepoints_playtime_field',  'field_playtime'),
  );
  $form['kalturacuepoints_segment_video_reference_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Field name for segment video reference'),
    '#size' => 60,
    '#description' => t('Internal name for a Node Reference field that points to a video node from a segment node.'),
    '#default_value' => variable_get('kalturacuepoints_video_reference_field',  'field_seg_video'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_menu()
 */
function kalturacuepoints_menu() {
  $items = array();
  $items['admin/config/kalturacuepoints'] = array(
    'title' => 'Kalturacuepoints module settings',
    'description' => 'Set Kaltura partner information and missing video message.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kalturacuepoints_admin'),
    'access arguments' => array('administer kalturacuepoints settings'),
    'type' => MENU_NORMAL_ITEM,
    );
  return $items;
}

function kalturacuepoints_admin_validate($form, &$form_state) {
  $partner = $form_state['values']['kalturacuepoints_partnerid'];
  if (!is_numeric($partner) || $partner <= 0) {
    form_set_error('kalturacuepoints_partnerid', t('Partner ID must be a positive number.'));
  }
  $partner = $form_state['values']['kalturacuepoints_subpartnerid'];
  if (!is_numeric($partner) || $partner <= 0) {
    form_set_error('kalturacuepoints_partnerid', t('Sub-Partner ID must be a positive number.'));
  }
}


/**
 * implementation of hook_field_display_node_alter()
 */
function kalturacuepoints_field_display_node_alter(&$display, $context) {
	//drupal_set_message('<pre>' . print_r($context, true) . '</pre>');
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function kalturacuepoints_block_info() {
	$blocks['kalturacuepoints_block'] = array(
		'info' => t('Video Cue Points display'),
		'cache' => DRUPAL_CACHE_PER_PAGE,
	);
	return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function kalturacuepoints_block_configure($delta = '') {
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.

  $form = array();
  if ($delta == 'kalturacuepoints_block') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['kalturacuepoints_partnerid'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura Partner ID'),
      '#size' => 60,
      '#description' => t('Kaltura Partner ID for the user eg. 111222.'),
      '#default_value' => variable_get('kalturacuepoints_partnerid',  ''),
    );
    $form['kalturacuepoints_subpartnerid'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura Sub Partner ID'),
      '#size' => 60,
      '#description' => t('Kaltura Sub Partner ID for the user eg. 11122233.'),
      '#default_value' => variable_get('kalturacuepoints_subpartnerid',  ''),
    );
   $form['kalturacuepoints_playerid'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura Player ID'),
      '#size' => 60,
      '#description' => t('Kaltura ID for the video player eg. 1112223.'),
      '#default_value' => variable_get('kalturacuepoints_playerid',  ''),
    );
   $form['kalturacuepoints_player_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Player Width in pixels'),
      '#size' => 60,
      '#description' => t('For the width and media:width of the embed code.'),
      '#default_value' => variable_get('kalturacuepoints_player_width',  '400'),
    );
   $form['kalturacuepoints_player_height'] = array(
      '#type' => 'textfield',
      '#title' => t('Player Height in pixels'),
      '#size' => 60,
      '#description' => t('For the height and media:height of the embed code.'),
      '#default_value' => variable_get('kalturacuepoints_player_height',  '289'),
    );
   $form['kalturacuepoints_entry_id_field'] = array(
      '#type' => 'textfield',
      '#title' => t('Field name for Kalture Entry ID'),
      '#size' => 60,
      '#description' => t('Internal name for the field containing the Kaltura ID for a video.'),
      '#default_value' => variable_get('kalturacuepoints_entry_id_field',  'field_kaltura_entry_id'),
    );
   $form['kalturacuepoints_playtime_field'] = array(
      '#type' => 'textfield',
      '#title' => t('Field name for segment start/stop times'),
      '#size' => 60,
      '#description' => t('Internal name for a Date field where the begin and end times are used to start and stop the video playback.'),
      '#default_value' => variable_get('kalturacuepoints_playtime_field',  'field_playtime'),
    );
   $form['kalturacuepoints_segment_video_reference_field'] = array(
      '#type' => 'textfield',
      '#title' => t('Field name for segment video reference'),
      '#size' => 60,
      '#description' => t('Internal name for a Node Reference field that points to a video node from a segment node.'),
      '#default_value' => variable_get('kalturacuepoints_video_reference_field',  'field_seg_video'),
    );
   $form['kalturacuepoints_no_video_message_field'] = array(
      '#type' => 'textfield',
      '#title' => t('Message to display when there is no video'),
      '#size' => 120,
      '#description' => t('When the block can not find a video to display show this.'),
      '#default_value' => variable_get('kalturacuepoints_no_video_message_field', t('Configure kalturacuepoints block field names or hide this block!')),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function kalturacuepoints_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'kalturacuepoints_block') {
    // Have Drupal save the string to the database.
    variable_set('kalturacuepoints_partnerid', $edit['kalturacuepoints_partnerid']);
    variable_set('kalturacuepoints_subpartnerid', $edit['kalturacuepoints_subpartnerid']);
    variable_set('kalturacuepoints_playerid', $edit['kalturacuepoints_playerid']);
    variable_set('kalturacuepoints_player_width', $edit['kalturacuepoints_player_width']);
    variable_set('kalturacuepoints_player_height', $edit['kalturacuepoints_player_height']);
    variable_set('kalturacuepoints_entry_id_field', $edit['kalturacuepoints_entry_id_field']);
    variable_set('kalturacuepoints_playtime_field', $edit['kalturacuepoints_playtime_field']);
    variable_set('kalturacuepoints_segment_video_reference_field',
      $edit['kalturacuepoints_segment_video_reference_field']);
    variable_set('kalturacuepoints_no_video_message_field', $edit['kalturacuepoints_no_video_message_field']);
  }
  return;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function kalturacuepoints_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'kalturacuepoints_block':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Video');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = kalturacuepoints_contents($delta);
      break;
  }
  return $block;
}

/**
 * converts HH:MM:SS to seconds
 */
function kalturacuepoints_to_seconds($hhmmss) {
	$parts = explode(':', $hhmmss);
	$sec = array_pop($parts);
	$sec += array_pop($parts) * 60;
	$sec += array_pop($parts) * 60 * 60;
	return $sec;
}

/**
 * finds the currently selected language
 */
function kalturacuepoints_language() {
	global $language;
	return $language->language;
	}

/**
 * converts playtime cck field to seconds
 */
function kalturacuepoints_playtime($playtime) {
	/*
	The date field (playtime) has to be set up as UTC! All fields
	have to be stored in the database including seconds.
	The display is H:i:s. Drupal defaults the year/month/day
	to 0000-1-1 but we'll ignore that anyway.
	start date is in value, end date is in value2
	if no end date is specified it matches start date
	*/
	$return_sec = array('start' => 0, 'end' => false);
	if (isset($playtime['und'][0]['value'])) {
		$start = $playtime['und'][0]['value'];
		$hms = array_pop(explode(' ',$start));
		$return_sec['start'] = kalturacuepoints_to_seconds($hms);
		$end = $playtime['und'][0]['value2'];
		if (strcmp($start,$end) != 0) {
			$hms = array_pop(explode(' ',$end));
			$return_sec['end'] = kalturacuepoints_to_seconds($hms);
			}
		}
	return $return_sec;
}

/**
 * checks for a Kaltura video entry id
 */
function kalturecuepoints_get_entry_id($node) {
  $entry_id_field = variable_get('kalturacuepoints_entry_id_field',  'field_kaltura_entry_id');
  if (isset($node) &&
    isset($node->{$entry_id_field}) &&
    isset($node->{$entry_id_field}['und']) &&
    isset($node->{$entry_id_field}['und'][0]) &&
    isset($node->{$entry_id_field}['und'][0]['safe_value'])) {
    return $node->{$entry_id_field}['und'][0]['safe_value'];
  }
  return FALSE;
}

/**
 * checks for a video node reference
 */
function kalturacuepoints_get_video_reference($node) {
  $video_reference_field = variable_get('kalturacuepoints_video_reference_field',  'field_seg_video');
  if (isset($node) &&
    isset($node->$video_reference_field) &&
    isset($node->{$video_reference_field}['und']) &&
    isset($node->{$video_reference_field}['und'][0]) &&
    isset($node->{$video_reference_field}['und'][0]['nid'])) {
    $vnodeid = $node->{$video_reference_field}['und'][0]['nid'];
    $vnode = node_load($vnodeid);
    return kalturecuepoints_get_entry_id($vnode);
  }
  return FALSE;
}

/**
 * checks for a playtime field
 */
function kalturacuepoints_get_playtime($node) {
  $playtime_field = variable_get('kalturacuepoints_playtime_field',  'field_playtime');
  if ($node &&
    isset($node->{$playtime_field}) &&
    isset($node->{$playtime_field}['und']) &&
    isset($node->{$playtime_field}['und'][0]) &&
    isset($node->{$playtime_field}['und'][0]['value'])) {
    return kalturacuepoints_playtime($node->{$playtime_field});
  }
  return FALSE;
}

/**
 * A module-defined block content function.
 */
function kalturacuepoints_contents($which_block) {
  switch ($which_block) {
	case 'kalturacuepoints_block':
		// detect the current node (block shows only on video and segment nodes or video-test view)
		$nid = FALSE;
		if (arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2)) {
			// when node is showing
			$nid = arg(1);
			}
		else if (preg_match('/\/([0-9]+)$/',request_uri(), $matches)) {
			// when a view is showing - assuming an argument is numeric!!!
			//$path = drupal_lookup_path('source', $matches[1]);
			//drupal_set_message('kalturacuepoints_contents: ' . print_r($path, true));
			$nid = $matches[1];
			}
		if ($nid !== FALSE && (($node = node_load($nid)) !== FALSE)) {
      // try to find a kaltura id field
      if (($video_id = kalturecuepoints_get_entry_id($node)) !== FALSE) {
        $time = array('start' => 0, 'end' => FALSE);
			}
 			elseif (($video_id = kalturacuepoints_get_video_reference($node)) !== FALSE) {
        if (($playtime = kalturacuepoints_get_playtime($node)) !== FALSE) {
          $time = $playtime;
        }
        else {
           $time = array('start' => 0, 'end' => FALSE);
        }
      }
     	else {
        $msg = variable_get('kalturacuepoints_no_video_message_field', t('Configure kalturacuepoints block field names or hide this block!'));
   			return array( '#markup' => t('<div class="video-message">@msg</div>', array('@msg' => $msg)));
   		}

  		$language = kalturacuepoints_language();
			$title = isset($node->title_field["$language"][0]['safe_value']) ?
			   $node->title_field["$language"][0]['safe_value'] : '';
			$description = isset($node->body["$language"][0]['safe_value']) ?
			   $node->body["$language"][0]['safe_value'] : '';

			$code = array(
				'<div id="ctitle">' . $title . '</div>',
				kalturacuepoints_player_embed_code($video_id, $title, $description, $time['start'], $time['end'],
					variable_get('kalturacuepoints_partnerid',''),
					variable_get('kalturacuepoints_subpartnerid',''),
					variable_get('kalturacuepoints_playerid',''),
					variable_get('kalturacuepoints_player_width',''),
					variable_get('kalturacuepoints_player_height','')
					)
				);
			$chaps = array( '#markup' => implode(PHP_EOL, $code));
			return $chaps;
			}
		break;
		}
}

function kalturacuepoints_player_embed_code($entry, $title, $description,
  $start_sec = 0, $end_sec = false,
  $partner = 518251, $sub_partner = 51825100, $player = 9524271 /*7929281*/,
  $player_width = 400, $player_height = 289 ) {
  // emit code for a kaltura player
  // $entry is the id of the asset like 1_t9lgbvo6
  $playrange = "mediaProxy.mediaPlayFrom=$start_sec";
  if ($end_sec !== false) {
    $playrange .= "&mediaProxy.mediaPlayTo=$end_sec";
    }
  $fv_playrange="flashvars[mediaProxy.mediaPlayFrom]=$start_sec";
  if ($end_sec !== FALSE) {
    $fv_playrange .= "&flashvars[mediaProxy.mediaPlayTo]=$end_sec";
  }
// // new larger Captioning Chapter Player 640 x 444
// // player 9524271
// $str_5 = <<<EOD
// <div id="kaltura_player_1369932496" style="width: {$player_width}px; height: {$player_height}px;" itemprop="video" itemscope itemtype="http://schema.org/VideoObject">
// <span itemprop="name" content="$title"></span>
// <span itemprop="description" content="$description"></span>
// <span itemprop="duration" content=""></span>
// <span itemprop="thumbnail" content=""></span>
// <span itemprop="width" content="$player_width"></span>
// <span itemprop="height" content="$player_height"></span>
// <a href="http://corp.kaltura.com/products/video-platform-features">Video Platform</a>
// <a href="http://corp.kaltura.com/Products/Features/Video-Management">Video Management</a>
// <a href="http://corp.kaltura.com/Video-Solutions">Video Solutions</a>
// <a href="http://corp.kaltura.com/Products/Features/Video-Player">Video Player</a></div>
// <script src="http://cdnapi.kaltura.com/p/$partner/sp/$sub_partner/embedIframeJs/uiconf_id/$player/partner_id/$partner?autoembed=true&entry_id=$entry&playerId=kaltura_player_1369932496&cache_st=1369932496&width=$player_width&height=$player_height&flashvars[akamaiHD.loadingPolicy]=preInitialize&flashvars[akamaiHD.asyncInit]=true&flashvars[streamerType]=hdnetwork"></script>
// EOD;
// // newer Large Captioning Chapter Player Universal with support for https
// // player ID 9524271
// $str_6 = <<<EOD
// <script src="https://cdnapisec.kaltura.com/p/518251/sp/51825100/embedIframeJs/uiconf_id/9524271/partner_id/518251"></script>
// <div id="kaltura_player_1413991956" style="width: {$player_width}px; height: {$player_height}px;" itemprop="video" itemscope itemtype="http://schema.org/VideoObject">
// <span itemprop="name" content="$title"></span>
// <span itemprop="description" content="$description"></span>
// <span itemprop="duration" content=""></span>
// <span itemprop="thumbnail" content=""></span>
// <span itemprop="width" content="{$player_width}"></span>
// <span itemprop="height" content="{$player_height}"></span>
// </div>
// <script>
// kWidget.embed({
//   "targetId": "kaltura_player_1413991956",
//   "wid": "_{$partner}",
//   "uiconf_id": '{$player}',
//   "flashvars": {
//     "akamaiHD": {
//       "loadingPolicy": "preInitialize",
//       "asyncInit": "true"
//     },
//     "streamerType": "hdnetwork"
//   },
//   "cache_st": 1413991956,
//   "entry_id": "$entry"
// });
// </script>
// EOD;

// // newer Large Captioning Chapter Player Universal with support for https
// // player ID 9524271
// $str_7 = <<<EOD
// <div id="kaltura_player_1414675795" style="width: {$player_width}px; height: {$player_height}px;" itemprop="video" itemscope itemtype="http://schema.org/VideoObject">
// <span itemprop="name" content="$title"></span>
// <span itemprop="description" content="$description"></span>
// <span itemprop="duration" content=""></span>
// <span itemprop="thumbnail" content=""></span>
// <span itemprop="width" content="{$player_width}"></span>
// <span itemprop="height" content="{$player_height}"></span>
// </div>
// <script src="https://cdnapisec.kaltura.com/p/{$partner}/sp/{$partner}00/embedIframeJs/uiconf_id/{$player}/partner_id/{$partner}?autoembed=true&entry_id={$entry}&playerId=kaltura_player_1414675795&cache_st=1414675795&width={$player_width}&height={$player_height}&flashvars[streamerType]=auto&{$fv_playrange}"></script>
// EOD;

// even newer Large Captioning Chapter Player Universal with support for https
// player ID 9524271
$str = <<<EOD
<div id="kaltura_player_1445872886" style="width: {$player_width}px; height: {$player_height}px;" itemprop="video" itemscope itemtype="http://schema.org/VideoObject">
<span itemprop="name" content="$title""></span>
<span itemprop="description" content="$description"></span>
<span itemprop="duration" content=""></span>
<span itemprop="thumbnail" content=""></span>
<span itemprop="width" content="{$player_width}"></span>
<span itemprop="height" content="{$player_height}"></span>
</div>
<script src="//cdnsecakmi.kaltura.com/p/{$partner}/sp/{$partner}00/embedIframeJs/uiconf_id/{$player}/partner_id/{$partner}?autoembed=true&entry_id={$entry}&playerId=kaltura_player_1445872886&cache_st=1445872886&width={$player_width}&height={$player_height}&flashvars[streamerType]=auto&{$fv_playrange}"></script>
EOD;
  return $str;
}

function kalturacuepoints_player_widget($entry, $title, $description,
  $start_sec = 0, $end_sec = false,
  $partner = 518251, $sub_partner = 51825100, $player = 9524271,
  $player_width = 640, $player_height = 444 ) {

  // insert library call in page header
  $path = format_string('https://cdnapisec.kaltura.com/p/@partner/sp/@partner00/embedIframeJs/uiconf_id/@uiConfId/partner_id/@partner',
    array('@partner' => $partner, '@uiConfId' => $player));
  drupal_add_js($path);

  // return the widget target page element
  $widget = "<div id=\"kalturacuepoints_widget\" class=\"kaltura-embed\" style=\"width:{$player_width};height:{$player_height}\"></div>";

  // get start/stop time
  if ($start_sec == 0 && $end_sec === FALSE) {
    $playtime = '';
  }
  else if ($end_sec !== FALSE) {
    $playtime = ", \"mediaProxy.mediaPlayFrom\" : \"$start_sec\", \"mediaProxy.mediaPlayTo\" : \"$end_sec\"";
  }
  else {
    $playtime = ", \"mediaProxy.mediaPlayFrom\" : \"$start_sec\"";
  }

  // return the player
  $player = <<<EOD
<script>
  kWidget.embed({
    'targetId': 'kaltura_player_1413991956',
    'wid': '_{$partner}',
    'uiconf_id' : '{$player}',
    'entry_id' : '{$entry}',
    'flashvars':{ // flashvars allows you to set runtime uiVar configuration overrides.
      "externalInterfaceDisabled" : false,
      'autoPlay' : false $playtime
       "akamaiHD": {
        "loadingPolicy": "preInitialize",
        "asyncInit": "true"
        },
      "streamerType": "hdnetwork"
     },
    "cache_st": 1413991956,
    'params':{ // params allows you to set flash embed params such as wmode, allowFullScreen etc
      'wmode': 'transparent'
    }
  });
</script>
EOD;

  return "$widget $player";
}

/**
 * Implements hook_field_formatter_info().
 */
function kalturacuepoints_field_formatter_info() {
  return array(
    // note : current field is the Entry ID
    'kalturacuepoints_embed' => array(
      'label' => t('Kaltura Video Embed'),
      'description' => t('Renders the Entry ID in this field as a Video'),
      'field types' => array('text'),
      'settings'  => array( //Array of the settings we'll create
        'kalturacuepoints_playerid' => variable_get('kalturacuepoints_playerid',  ''),
        'kalturacuepoints_player_width' => variable_get('kalturacuepoints_player_width',  ''),
        'kalturacuepoints_player_height' => variable_get('kalturacuepoints_player_height',  ''),
        ),
      ),
    // note: current field is the segment's video node reference field
    'kalturacuepoints_embed_segment' => array(
      'label' => t('Kaltura Video Segment Embed'),
      'description' => t('Renders a Segment and its referenced video as a Video'),
      'field types' => array('node_reference'),
      'settings'  => array( //Array of the settings we'll create
        'kalturacuepoints_playerid' => variable_get('kalturacuepoints_playerid',  ''),
        'kalturacuepoints_player_width' => variable_get('kalturacuepoints_player_width',  ''),
        'kalturacuepoints_player_height' => variable_get('kalturacuepoints_player_height',  ''),
        'kalturacuepoints_entry_id_field' => variable_get('kalturacuepoints_entry_id_field',  ''),
        'kalturacuepoints_playtime_field' => variable_get('kalturacuepoints_playtime_field',  ''),
      ),
    ),
   );
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function kalturacuepoints_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();
  if ($display['type'] == 'kalturacuepoints_embed' || $display['type'] == 'kalturacuepoints_embed_segment') {
    $element['kalturacuepoints_playerid'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura Player ID'),
      '#size' => 60,
      '#description' => t('Kaltura ID for the video player eg. 1112223.'),
      '#default_value' => $settings['kalturacuepoints_playerid'],
    );
    $element['kalturacuepoints_player_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Player Width in pixels'),
      '#size' => 60,
      '#description' => t('For the width and media:width of the embed code.'),
      '#default_value' => $settings['kalturacuepoints_player_width'],
    );
    $element['kalturacuepoints_player_height'] = array(
      '#type' => 'textfield',
      '#title' => t('Player Height in pixels'),
      '#size' => 60,
      '#description' => t('For the height and media:height of the embed code.'),
      '#default_value' => $settings['kalturacuepoints_player_height'],
    );
    if ($display['type'] == 'kalturacuepoints_embed_segment') {
      // note: current filed is the video reference kalturacuepoints_video_reference_field
      $element['kalturacuepoints_entry_id_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Field name for Kalture Entry ID'),
        '#size' => 60,
        '#description' => t('Internal name for the field containing the Kaltura ID for a video (in the referenced video node).'),
        '#default_value' => $settings['kalturacuepoints_entry_id_field'],
      );
      $element['kalturacuepoints_playtime_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Field name for segment start/stop times'),
        '#size' => 60,
        '#description' => t('Internal name for a Date field where the begin and end times are used to start and stop the video playback.'),
        '#default_value' => $settings['kalturacuepoints_playtime_field'],
      );
    }
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function kalturacuepoints_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if ($display['type'] == 'kalturacuepoints_embed') {
    $summary = t('Use a @player player sized at width @wid x height @hgt. This text field contains the Kaltura Entry ID.', array(
      '@player'     => $settings['kalturacuepoints_playerid'],
      '@wid'     => $settings['kalturacuepoints_player_width'],
      '@hgt'     => $settings['kalturacuepoints_player_height'],
     )); // we use t() for translation and placeholders to guard against attacks
  }
  elseif ($display['type'] == 'kalturacuepoints_embed_segment') {
   $summary = t('Use a @player player sized at width @wid x height @hgt. The start and stop times are in the date field @play. This node reference field points to a video with the Kaltura Entry ID in the field @entry.', array(
      '@player'     => $settings['kalturacuepoints_playerid'],
      '@wid'     => $settings['kalturacuepoints_player_width'],
      '@hgt'     => $settings['kalturacuepoints_player_height'],
      '@entry'  => $settings['kalturacuepoints_entry_id_field'],
      '@play'     => $settings['kalturacuepoints_playtime_field'],
    )); // we use t() for translation and placeholders to guard against attacks
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function kalturacuepoints_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(); // Initialize the var
  $settings = $display['settings']; // get the settings

  $field_name = $field['field_name'];

  $player = $settings['kalturacuepoints_playerid'];
  $wid = $settings['kalturacuepoints_player_width'];
  $hgt = $settings['kalturacuepoints_player_height'];

  $language = kalturacuepoints_language();
  $title = isset($entity->title_field["$language"][0]['safe_value']) ?
    $entity->title_field["$language"][0]['safe_value'] : '';
  $description = isset($entity->body["$language"][0]['safe_value']) ?
    $entity->body["$language"][0]['safe_value'] : '';

  $partner = variable_get('kalturacuepoints_partnerid',  '');
  $subpartner = variable_get('kalturacuepoints_subpartnerid',  '');
  $novid = variable_get('kalturacuepoints_no_video_message_field', t('No video!'));

  $element = array();
  if ($display['type'] == 'kalturacuepoints_embed') {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    $entryid = $wrapper->{$field_name}->value();
    $embed = kalturacuepoints_player_embed_code($entryid, $title, $description, 0, FALSE,
          $partner, $subpartner, $player, $wid, $hgt);
    $element[0]['#markup'] = $embed;
  }
  elseif ($display['type'] == 'kalturacuepoints_embed_segment') {
/*
    TODO: test this kalturacuepoints_embed_segment - not in any site yet. -jgr25

    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    $props = entity_get_property_info($entity_type);
    drupal_set_message(t(print_r($props, TRUE)), 'status', FALSE);
    $entryid = $wrapper->{$field_name}->value();
*/
    $entryidarray = array_pop($v1strict = array_pop($v2strict = $entity->{$field_name}));
    $video_nid = $entryidarray['nid'];
    $access = $entryidarray['access'];
    if ($access === TRUE) {
      $node = node_load($video_nid);
      $entryfield = $settings['kalturacuepoints_entry_id_field'];
      $entryidarray = array_pop($v1strict = array_pop($v2strict = $node->{$entryfield}));
      $entryid = $entryidarray['safe_value'];
      $playtimefield = $settings['kalturacuepoints_playtime_field'];
      $playtime = kalturacuepoints_playtime($entity->{$playtimefield});
      $embed = kalturacuepoints_player_embed_code($entryid, $title, $description, $playtime['start'], $playtime['end'],
          $partner, $subpartner, $player, $wid, $hgt);
      $element[0]['#markup'] = $embed;
   }

  }

  //$test = array($field_name, $player, $wid, $hgt, $entryid, $partner,  $subpartner,
  //  $novid, $title, $description, $playtime);
  //dsm($test);

  return $element;
}

/**
 * Implements hook_theme_registry_alter().
 */
function kalturacuepoints_theme_registry_alter(&$theme_registry) {
    // Defined path to the current module.
    $module_path = drupal_get_path('module', 'kalturacuepoints');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
}

/**
 * Implements: hook_views_post_execute().
 */
function kalturacuepoints_views_post_execute(&$view) {
  if ($view->name == 'clone_of_video_segment_display_conversations_v2_') {
    dsm('called kalturacuepoints_views_post_execute');
    foreach ($view->result as $r) {
      if (isset($r->field_field_playtime)) {
        dsm($r->field_field_playtime);
        $r->field_field_playtime[0]['rendered']['#markup'] = 'my test output';
      }
    }
  }
}
