<?php
// $Id$

/**
 * @file
 * Support for CuePoints in Kaltura Videos
 */

//require_once(dirname(__FILE__) . "/kaltura_php5/KalturaClient.php");

/**
 * load kaltura stuff
 */
function kalturacuepoints_init() {
	drupal_add_js(drupal_get_path("module", "kaltura") . "/js/kaltura_player_controller.js");
	//drupal_add_js(drupal_get_path("module", "kalturacuepoints") . "/kalturacuepoints.js");
}

/**
 * implementation of hook_field_display_node_alter()
 */
function kalturacuepoints_field_display_node_alter(&$display, $context) {
	//drupal_set_message('<pre>' . print_r($context, true) . '</pre>');
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function kalturacuepoints_block_info() {
	$blocks['kalturacuepoints_block'] = array(
		'info' => t('Video Cue Points display'),
		'cache' => DRUPAL_CACHE_PER_ROLE,
	);
	return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function kalturacuepoints_block_configure($delta = '') {
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.

  $form = array();
  if ($delta == 'kalturacuepoints_block') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['kalturacuepoints_asset'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura ID'),
      '#size' => 60,
      '#description' => t('Kaltura ID for the asset eg. 1_b270ldha.'),
      '#default_value' => variable_get('kalturacuepoints_asset',  t('1_b270ldha')),
    );
    $form['kalturacuepoints_partnerid'] = array(
      '#type' => 'textfield',
      '#title' => t('Kaltura Partner ID'),
      '#size' => 60,
      '#description' => t('Kaltura Partner ID for the user eg. 111222.'),
      '#default_value' => variable_get('kalturacuepoints_partnerid',  ''),
    );
    $form['kalturacuepoints_secret'] = array(
      '#type' => 'password',
      '#title' => t('Kaltura Partner password'),
      '#size' => 60,
      '#description' => t('Kaltura password for the user.'),
      '#default_value' => variable_get('kalturacuepoints_secret',  ''),
    );
    $form['kalturacuepoints_admin_secret'] = array(
      '#type' => 'password',
      '#title' => t('Kaltura Administration Secret'),
      '#size' => 60,
      '#description' => t('Kaltura addmin secret from the KMC.'),
      '#default_value' => variable_get('kalturacuepoints_admin_secret',  ''),
    );
    $form['kalturacuepoints_service_url'] = array(
      '#type' => 'password',
      '#title' => t('Kaltura Service URL'),
      '#size' => 120,
      '#description' => t('eg. http://www.kaltura.com'),
      '#default_value' => variable_get('kalturacuepoints_service_url',  
      	t('!url', array('!url' => 'http://www.kaltura.com'))),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function kalturacuepoints_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'kalturacuepoints_block') {
    // Have Drupal save the string to the database.
    variable_set('kalturacuepoints_asset', $edit['kalturacuepoints_asset']);
    variable_set('kalturacuepoints_partnerid', $edit['kalturacuepoints_partnerid']);
    variable_set('kalturacuepoints_secret', $edit['kalturacuepoints_secret']);
    variable_set('kalturacuepoints_admin_secret', $edit['kalturacuepoints_admin_secret']);
    variable_set('kalturacuepoints_service_url', $edit['kalturacuepoints_service_url']);
  }
  return;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function kalturacuepoints_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'kalturacuepoints_block':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Kaltura Cue Points');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = kalturacuepoints_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function kalturacuepoints_contents($which_block) {
  switch ($which_block) {
	case 'kalturacuepoints_block':
		/*
		$js_inner = array( 'KalturaChaptersSample.jumpToTime( "13" );' );
		$js = "jQuery(document).ready(function () { " . implode(" ", $js_inner) . " });";
		drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
		*/
		
		$seek = 50000;
		$js_inner = array( 
			'var pc = new KalturaPlayerController("kaltura_player_7488");',
			'pc.seek("13")',
			/*
			'KalturaPlayerController.prototype.sendNotification", "doPlay");',
			'KalturaPlayerController.prototype.queue("sendNotification", "doSeek",
			 "' . $seek . '/1000");',
			 */
			);
		$js = "jQuery(document).ready(function () { " . implode(" ", $js_inner) . " });";
		drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
		
		/* works
		$js = "jQuery(document).ready(function () { KalturaPlayerController.prototype.seek(\"$seek\"); });";
		drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
		$js = "jQuery(document).ready(function () { KalturaPlayerController.prototype.play(); });";
		drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer', 'weight' => 10));
		drupal_add_js('jQuery(document).ready(function () { alert("Hello kalturacuepoints!"); });', 'inline');
		*/
		break;
    case 'kalturacuepoints_block2':
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the variable set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
      // Block content created through the UI defaults to a string.
	  
	  $kaltura_client = kalturacuepoints_getClient(true);
	  if (!$kaltura_client) {
		drupal_set_message(t('Failed to start Kaltura session. Please check your settings.'), 'error');
	  	}
	  else {
	  	$entryId = variable_get('kalturacuepoints_asset', t('1_b270ldha'));
		//Get all Cue points
		$filter = new KalturaCuePointFilter();
		$filter->entryIdEqual = $entryId;
		$pager = null;
		$results = $kaltura_client->cuePoint->listAction($filter, $pager);
		
		$cuePoints = $results->objects;
		usort($cuePoints, "kalturacuepoints_cmp");
		
		$currentChapterNum = 2;
		if(isset($cuePoints[$currentChapterNum]))
			$currentCuePoint = $cuePoints[$currentChapterNum];
		else
			$currentCuePoint = reset($cuePoints);
		
		/*
		drupal_set_message(print_r($currentCuePoint, true)); // jgr
		KalturaAdCuePoint Object
(
    [protocolType] => 0
    [sourceUrl] => 
    [adType] => 1
    [title] => 
    [endTime] => 
    [duration] => 
    [id] => 1_y675t5kc
    [cuePointType] => adCuePoint.Ad
    [status] => 1
    [entryId] => 1_b270ldha
    [partnerId] => 518251
    [createdAt] => 1331652418
    [updatedAt] => 1331652418
    [tags] => vp2-ad
    [startTime] => 420000
    [userId] => batchUser
    [partnerData] => 
    [partnerSortValue] => 
    [forceStop] => 
    [thumbOffset] => 
    [systemName] => 
)
*/
		if (!empty($currentCuePoint)) {
			$output = array('#markup' =>
				t('entryId: @entryId tags: @tags startTime: @start',
				array('@entryId' => $currentCuePoint->entryId, 
					'@tags' => $currentCuePoint->tags,
					'@start' => $currentCuePoint->startTime,
					)
				),
			);
			return $output;	
	  	}
      return array('#markup' => variable_get('kalturacuepoints_asset',  t('A default value. This block was created at %time', array('%time' => date('c')))));
  }
  }
}

		
function kalturacuepoints_cmp($a, $b) {
   if ($a->startTime == $b->startTime)
	   return 0;
   else
	  return ($a->startTime < $b->startTime ? -1 : 1);
}

function kalturacuepoints_getClient($isAdmin = false, $userId = 'SomeUser') {
	return false; //debug
	$partnerId = variable_get('kalturacuepoints_partnerid', '');
	$kConfig = new KalturaConfiguration($partnerId);
	$kConfig->serviceUrl = variable_get('kalturacuepoints_service_url',  t('!url', array('!url' => 'http://www.kaltura.com')));
	$client = new KalturaClient($kConfig);
	
	$sessionType = ($isAdmin)? KalturaSessionType::ADMIN : KalturaSessionType::USER; 
	try
	{
		$adminSecret = variable_get('kalturacuepoints_admin_secret', '');
		$ks = $client->generateSession($adminSecret, $userId, $sessionType, $partnerId);
		$client->setKs($ks);
	}
	catch(Exception $ex)
	{
		drupal_set_message(t("could not start session - check configurations in Kaltura Cue Points"));
	}
	
	return $client;
}